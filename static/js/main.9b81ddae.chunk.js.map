{"version":3,"sources":["PokeCard.js","PokeDex.js","PokeGame.js","App.js","serviceWorker.js","index.js"],"names":["PokeCard","this","props","id","name","type","base_experience","threeDigitId","slice","imgSrc","className","src","alt","Component","PokeDex","title","pokemons","exp","isWinner","map","otherProps","key","PokeGame","hand1","hand2","length","randomPokemonIndex","Math","floor","random","randomPokemon","splice","push","exp1","reduce","accumulator","pokemon","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAuBeA,G,6KAjBH,IAAD,EACqCC,KAAKC,MAAzCC,EADD,EACCA,GAAIC,EADL,EACKA,KAAMC,EADX,EACWA,KAAMC,EADjB,EACiBA,gBAClBC,EAAe,YAAKJ,GAAKK,OAAO,GAClCC,EAAM,UANG,8DAMH,OAAiBF,EAAjB,QACV,OACE,yBAAKG,UAAU,YACb,4BAAKN,GACL,yBAAKM,UAAU,kBACb,yBAAKC,IAAKF,EAAQG,IAAKR,KAEzB,sCAAYC,GACZ,4CAAkBC,Q,GAZHO,cCwBRC,G,6KAxBH,IAGJC,EAHG,EAC6Bd,KAAKC,MAAjCc,EADD,EACCA,SAAUC,EADX,EACWA,IAQlB,OAJEF,EALK,EACgBG,SAIb,wBAAIR,UAAU,kBAAd,gBAEA,wBAAIA,UAAU,iBAAd,eAGR,yBAAKA,UAAU,WACZK,EACD,iDAAuBE,GAEvB,yBAAKP,UAAU,iBACZM,EAASG,KAAI,YAA4B,IAAzBhB,EAAwB,EAAxBA,GAAOiB,EAAiB,sBACvC,OAAO,kBAAC,EAAD,eAAUC,IAAKlB,EAAIA,GAAIA,GAAQiB,a,GAjB5BP,cCDhBS,E,uKAiBF,IAHA,IAAIC,EAAQ,GACRC,EAAK,YAAOvB,KAAKC,MAAMc,UAEpBO,EAAME,OAASD,EAAMC,QAAQ,CAClC,IAAIC,EAAqBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QACtDK,EAAgBN,EAAMO,OAAOL,EAAoB,GAAG,GACxDH,EAAMS,KAAKF,GAYb,IAAIG,EAAOV,EAAMW,QACf,SAACC,EAAaC,GAAd,OAA0BD,EAAcC,EAAQ9B,kBAChD,GAEE+B,EAAOb,EAAMU,QACf,SAACC,EAAaC,GAAd,OAA0BD,EAAcC,EAAQ9B,kBAChD,GAGF,OACE,6BACE,kBAAC,EAAD,CAASU,SAAUO,EAAON,IAAKgB,EAAMf,SAAUe,EAAOI,IACtD,kBAAC,EAAD,CAASrB,SAAUQ,EAAOP,IAAKoB,EAAMnB,SAAUmB,EAAOJ,S,GA5CvCpB,aAAjBS,EACGgB,aAAe,CACpBtB,SAAU,CACR,CAAEb,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQC,gBAAiB,IAC5D,CAAEH,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASC,gBAAiB,IAC3D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOC,gBAAiB,IACzD,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,KAC/D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYC,gBAAiB,KAC9D,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,IAC/D,CAAEH,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUC,gBAAiB,KAC3D,CAAEH,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUC,gBAAiB,MAwClDgB,QCxCAiB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b81ddae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './PokeCard.css';\n\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\nclass PokeCard extends Component {\n  render() {\n    const { id, name, type, base_experience } = this.props;\n    const threeDigitId = `00${id}`.slice(-3);\n    let imgSrc = `${POKE_API}${threeDigitId}.png`;\n    return (\n      <div className=\"PokeCard\">\n        <h1>{name}</h1>\n        <div className=\"PokeCard-image\">\n          <img src={imgSrc} alt={name} />\n        </div>\n        <div>Type: {type}</div>\n        <div>Experience: {base_experience}</div>\n      </div>\n    );\n  }\n}\n\nexport default PokeCard;\n","import React, { Component } from 'react';\nimport PokeCard from './PokeCard';\nimport './PokeDex.css';\n\nclass PokeDex extends Component {\n  render() {\n    const { pokemons, exp, isWinner } = this.props;\n\n    let title;\n    if (isWinner) {\n      title = <h1 className=\"PokeDex-winner\">Winning Hand</h1>;\n    } else {\n      title = <h1 className=\"PokeDex-loser\">Losing Hand</h1>;\n    }\n    return (\n      <div className=\"PokeDex\">\n        {title}\n        <h3>Total Experience: {exp}</h3>\n\n        <div className=\"PokeDex-cards\">\n          {pokemons.map(({ id, ...otherProps }) => {\n            return <PokeCard key={id} id={id} {...otherProps} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PokeDex;\n","import React, { Component } from 'react';\nimport PokeDex from './PokeDex';\n\nclass PokeGame extends Component {\n  static defaultProps = {\n    pokemons: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 },\n    ],\n  };\n  render() {\n    let hand1 = [];\n    let hand2 = [...this.props.pokemons];\n\n    while (hand1.length < hand2.length) {\n      let randomPokemonIndex = Math.floor(Math.random() * hand2.length);\n      let randomPokemon = hand2.splice(randomPokemonIndex, 1)[0];\n      hand1.push(randomPokemon);\n    }\n\n    // const totalExpHand1 = hand1.map((p) => {\n    //   let exp1 = 0;\n    //   return (exp1 += p.base_experience);\n    // });\n    // const totalExpHand2 = hand2.map((p) => {\n    //   let exp2 = 0;\n    //   return (exp2 += p.base_experience);\n    // });\n\n    let exp1 = hand1.reduce(\n      (accumulator, pokemon) => accumulator + pokemon.base_experience,\n      0\n    );\n    let exp2 = hand2.reduce(\n      (accumulator, pokemon) => accumulator + pokemon.base_experience,\n      0\n    );\n\n    return (\n      <div>\n        <PokeDex pokemons={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <PokeDex pokemons={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    );\n  }\n}\n\nexport default PokeGame;\n","import React from 'react';\n\nimport './App.css';\nimport PokeGame from './PokeGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PokeGame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}